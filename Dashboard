<template>
  <div>
    <div v-if="!user" class="login-container">
      <h2>Login to access the Dashboard</h2>
      <button @click="login">Login with Gmail</button>
    </div>

    <div v-else class="dashboard-layout">
      <aside class="sidebar">
        <h2 class="sidebar-title">Menu</h2>
        <ul class="sidebar-menu">
          <li class="active-tab">Dashboard</li>
          <li class="graph">Graph</li>
          <li @click="logout">Logout</li>
        </ul>
      </aside>

      <div class="aquaponics-dashboard">
        <div class="panel">
          <h1>Aquaponics Monitoring System</h1>

          <div class="date-section">
            <label for="date">Date:</label>
            <input type="date" id="date" v-model="currentDate" />
          </div>

          <div class="key-metrics">
            <div class="metric-tile water-temp">
              <div class="metric-label">Water Temperature</div>
              <div class="metric-value">
                {{ readings.length > 0 ? readings[readings.length - 1].wt : 'N/A' }} Â°C
              </div>
            </div>
            <div class="metric-tile ph-level">
              <div class="metric-label">Water pH Level</div>
              <div class="metric-value">
                {{ readings.length > 0 ? readings[readings.length - 1].wphl : 'N/A' }}
              </div>
            </div>
            <div class="metric-tile air-temp-humidity">
              <div class="metric-label">Air Temp & Humidity</div>
              <div class="metric-value">
                {{ readings.length > 0 ? readings[readings.length - 1].atah : 'N/A' }}
              </div>
            </div>
          </div>

          <div class="input-and-chart-area">
            <div class="add-reading-panel">
              <h3>Add New Reading</h3>
              <div class="readings-row">
                <div class="reading-input">
                  <label for="cwt">Water Temp:</label>
                  <input type="number" id="cwt" v-model="currentCWT" />
                </div>
                <div class="reading-input">
                  <label for="cwphl">Water pH:</label>
                  <input type="number" id="cwphl" v-model="currentCWPHL" />
                </div>
                <div class="reading-input">
                  <label for="catah">Air Temp/Hum:</label>
                  <input type="number" id="catah" v-model="currentCATaH" />
                </div>
              </div>
              <button @click="addReading">Add Reading</button>
            </div>

            <div class="chart-container">
              <canvas id="aquaponicsChart"></canvas>
            </div>
          </div>

          <div class="data-table">
            <table>
              <thead>
                <tr>
                  <th>Time</th>
                  <th>WT</th>
                  <th>ATAH</th>
                  <th>WPHL</th>
                </tr>
              </thead>
              <tbody>
                <tr v-for="(reading, index) in readings" :key="index">
                  <td>{{ reading.time }}</td>
                  <td>{{ reading.wt }}</td>
                  <td>{{ reading.atah }}</td>
                  <td>{{ reading.wphl }}</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import moment from 'moment';
import { auth, provider, signInWithPopup, signOut, onAuthStateChanged } from '../firebase';
import { Chart, registerables } from 'chart.js';
import Dashboard from './Dashboard.vue';
Chart.register(...registerables);

export default {
  name: 'Dashboard',
  data() {
    return {
      user: null,
      currentDate: moment().format('YYYY-MM-DD'),
      currentCWT: null,
      currentCATaH: null,
      currentCWPHL: null,
      readings: [],
      chart: null
    };
  },
  methods: {
    async login() {
      try {
        const result = await signInWithPopup(auth, provider);
        this.user = result.user;
      } catch (error) {
        console.error('Login error:', error);
      }
    },
    async logout() {
      try {
        await signOut(auth);
        this.user = null;
      } catch (error) {
        console.error('Logout error:', error);
      }
    },
    addReading() {
      if (
        this.currentCWT !== null &&
        this.currentCATaH !== null &&
        this.currentCWPHL !== null
      ) {
        this.readings.push({
          time: moment().format('HH:mm:ss'),
          wt: parseFloat(this.currentCWT),
          atah: parseFloat(this.currentCATaH),
          wphl: parseFloat(this.currentCWPHL)
        });
        this.currentCWT = null;
        this.currentCATaH = null;
        this.currentCWPHL = null;
        this.updateChart();
      } else {
        alert('Please fill in all the current readings.');
      }
    },
    updateChart() {
      const canvasElement = document.getElementById('aquaponicsChart');
      if (canvasElement) {
        const ctx = canvasElement.getContext('2d');
        if (this.chart) {
          this.chart.destroy(); // Destroy existing chart if any
        }
        this.chart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: this.readings.map(reading => reading.time),
            datasets: [
              {
                label: 'Water Temperature',
                data: this.readings.map(reading => reading.wt),
                borderColor: 'rgb(54, 162, 235)',
                tension: 0.1
              },
              {
                label: 'Air Temperature and Humidity',
                data: this.readings.map(reading => reading.atah),
                borderColor: 'rgb(255, 99, 132)',
                tension: 0.1
              },
              {
                label: 'Water pH Level',
                data: this.readings.map(reading => reading.wphl),
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1
              }
            ]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      } else {
        console.error('Canvas element with id "aquaponicsChart" not found.');
      }
    }
  },
  mounted() {
    onAuthStateChanged(auth, (firebaseUser) => {
      this.user = firebaseUser;
      if (this.user) {
        this.$nextTick(() => {
          this.updateChart();
        });
      }
    });
  },
  beforeUnmount() {
    if (this.chart) {
      this.chart.destroy();
    }
  }
};
</script>

<style scoped>
/* Shared layout */
.dashboard-layout {
  display: flex;
  min-height: 100vh;
  font-family: 'Segoe UI', sans-serif;
  background: linear-gradient(to bottom, #cce6ff, #ffffff);
}

/* Login container */
.login-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  text-align: center;
}

.login-container button {
  padding: 10px 20px;
  background-color: #007bff;
  border: none;
  color: white;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
}

/* Sidebar */
.sidebar {
  width: 200px;
  background-color: #004d99;
  color: white;
  padding: 20px;
}

.sidebar-title {
  font-size: 18px;
  font-weight: bold;
  margin-bottom: 20px;
  border-bottom: 1px solid #ccc;
  padding-bottom: 10px;
}

.sidebar-menu {
  list-style: none;
  padding: 0;
}

.sidebar-menu li {
  padding: 10px;
  border-radius: 5px;
  cursor: pointer;
}

.sidebar-menu li:hover {
  background-color: #0066cc;
}

.active-tab {
  background-color: #007bff;
  font-weight: bold;
}

/* Main Dashboard */
.aquaponics-dashboard {
  flex: 1;
  padding: 30px;
  display: flex;
  flex-direction: column; 
  align-items: flex-start; 
}

.panel {
  background-color: white;
  padding: 30px;
  border-radius: 10px;
  width: 100%;
  max-width: 1200px; 
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
}

.panel h2 {
  font-size: 20px;
  margin-bottom: 10px;
}

.panel h1 {
  font-size: 24px;
  font-weight: bold;
  color: #333;
  margin-bottom: 20px;
}

.date-section {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 20px;
}

.date-section input {
  padding: 5px;
  border-radius: 5px;
  border: 1px solid #aaa;
}

.key-metrics {
  display: flex;
  gap: 20px;
  margin-bottom: 30px;
  flex-wrap: wrap; 
}

.metric-tile {
  background-color: white;
  color: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 250px; 
  text-align: center;
}

.metric-label {
  font-size: 1.1em;
  margin-bottom: 5px;
}

.metric-value {
  font-size: 1.8em;
  font-weight: bold;
}

.water-temp {
  background-color: #29b6f6;
}

.ph-level {
  background-color: #66bb6a;
}

.air-temp-humidity {
  background-color: #ab47bc;
}

.readings-row {
  display: flex;
  gap: 15px;
  margin-bottom: 25px;
  flex-wrap: wrap; 
}

.reading-input {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.reading-input label {
  font-weight: bold;
  margin-bottom: 5px;
  color: #555;
}

.reading-input input {
  width: 80px;
  height: 40px;
  text-align: center;
  border: 1px solid #999;
  border-radius: 5px;
  font-size: 16px;
}

button {
  display: inline-block; 
  padding: 10px 25px;
  background-color: #007bff;
  color: white;
  border: none;
  font-weight: bold;
  border-radius: 8px;
  cursor: pointer;
  margin-bottom: 20px; 
}

.input-and-chart-area {
  display: flex;
  gap: 30px;
  margin-bottom: 30px;
  align-items: flex-start;
  flex-wrap: wrap; 
}

.add-reading-panel {
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 350px; /* Adjust width as needed */
}

.add-reading-panel h3 {
  margin-top: 0;
  margin-bottom: 15px;
  color: #333;
}

.chart-container {
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  flex-grow: 1; 
  min-width: 300px; 
  position: relative;
  height: 300px;
}

.data-table {
  margin-top: 20px;
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 100%;
  overflow-x: auto; }

.data-table table {
  width: 100%;
  border-collapse: collapse;
  font-size: 16px;
}

.data-table th,
.data-table td {
  border: 1px solid #000;
  padding: 10px;
  text-align: center;
}

.data-table th {
  background-color: #d9ecff;
  font-weight: bold;
}
</style>
